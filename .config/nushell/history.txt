which nu
config --help
source --help
config env
chsh -s /bin/zsh
which nu
config env
cd .config/zsh/
ls
lvim zsh-aliases
lunarvim
cd
echo $PATH
echo path
mkdir -p
mkdir -h
mkdir -s
zsh
mkdir -s .config/.test/.test
rm -rf .config/.test/.test
rmdir
alias ls='ls --color=auto'
alias ls = ls --color=auto
ls
ls --help
alias ls = ls
ls --help
ls -f
ls
ls -l
alias ll = ls -l
grep --help
alias l = ls -lah
alias la = ls -lAh
alias ll = ls -lh
l
ll
ls -la
ls -lA
ls -lah
ls -as
ls -a
ls -h
alias l = ls -la
alisas la = ls *.rs
alias la = ls *.rs
la
ls *.rs
ls -h
cd Projects/rust/
ls
la
ls | *.rs
ls | .rs
cd
la
lls -h
ls -h
ls -du
ls -d
ls -h
diff
diff --help
diff --color
alias diff = diff --collor
alias diff = diff --color
alias md = mkdir -s
alias rd = rmdir
alias rm = rm -i
alias cp = cp -i
alias lt = (ls | sort-by modified -r | sort-by type)
ls
ls | sort-by type
ls | sort-by modified -r
alias lt = (ls | sort-by type)
alias lm = (ls | sort-by modified -r)
ls | get name
ll
alias ll = ls -l
ll
ll -s
ll -a
ll
ll | mode
ll
ll | mode
ll | module
ll
ll | sort-by bode
ll | sort-by mode
ll | sort-by mode -r
alias ll = (ls -l | sort-by mode -r)
ll
ls -l
ll
alias ll = ls -l
ll
ll mode
alias config = '/usr/bin/git -- git-dir=$HOME/.cfg --work-tree=$HOME'
config
config info
git info
git --help
config show
git show
zsh
$HOME
cd $HOME
cd ~
login.nu
config login
env | each { |it| echo $"let-env ($it.name) = '($it.raw)'" } | str join (char nl)
config
config show
zsh
config show
cat /etc/shells
$nu.loginshell-path
ls
$nu.loginshell-path
lvim
alias mv = mv -i
chsh
chsh -l
chsh -s /bin/zsh
free -m
df -h
df
df -h
alias df = df -h
alias free = free -m
free
df
$PATH
path
let-env PATH = $env.PATH
let-env PATH = ($env.PATH | prepend '/home/linuxbrew/.linuxbrew/bin')
brew 
git
config
alias configure = '/usr/bin/git -- git-dir=$HOME/.cfg --work-tree=$HOME'
configure show
configure
config
configure
alias configure = '/usr/bin/git --git-dir=$HOME/.cfg --work-tree=$HOME'
configure
configure show
env
configure | str join
configure
do -i {configure}
^ls
^config 
^config show
show
^show
^$HOME
ls
^ls
lvim
^lvim
$env.PATH
./upddate
env | each { |it| echo $"let-env ($it.name) = '($it.raw)'" } | str join (char nl)
let-env PATH = ($env.PATH | append /home/sshep/anaconda3/bin)
let-env PATH = ($env.PATH | append /home/sshep/.miniconda/bin)
let-env PATH = ($env.PATH | append /home/sshep/.local/share/neovim/bin)
let-env PATH = ($env.PATH | append /home/sshep/.local/share/go/bin)
let-env PATH = ($env.PATH | append /home/sshep/.local/bin)
let-env PATH = ($env.PATH | append /home/linuxbrew/.linuxbrew/bin)
let-env PATH = ($env.PATH | append /home/linuxbrew/.linuxbrew/sbin)
let-env PATH = ($env.PATH | append /usr/local/sbin)
let-env PATH = ($env.PATH | append /usr/local/bin)
let-env PATH = ($env.PATH | append /usr/bin)
let-env PATH = ($env.PATH | append /usr/lib/jvm/default/bin)
let-env PATH = ($env.PATH | append /usr/bin/site_perl)
let-env PATH = ($env.PATH | append /usr/bin/vendor_perl)
let-env PATH = ($env.PATH | append /usr/bin/core_perl)
echo path
echo $enc.PATH
echo $env.PATH
lvim
config env
config
config nu
config reset
config nu
config
config env
ll
ceho $env.PATH
eho $env.PATH
echo $env.PATH
lvim
config env
config nu
chsh -l
configure-printer 
config 
config nu
$env.PATH
$env.PWD
PWD
pwd
$env.PATH
$env.KITTY_PID
$env.NU_PLUGIN_DIRS
$env.SHELL
$env.EDITOR
alias
alias --help
path
lazygit
zi
zoxide
eval 
zoxide init
which nu
zoxide /home/sshep/.cargo/bin/nu
zoxide init /home/sshep/.cargo/bin/nu
ls -l | grid -c
ls -l | gris
ls -l | grid
ls -l | grid -c
ls -l
ls
ls | grid -c
alias ls = ls | grid -c
alias ls = (ls | grid -c)
ls
ls -l
ls
alias ls = ls
alias lg = (ls | grid -c)
lg
ls
ls -l
lg
ls
lvim
pacman -Syy
sudo pacman -Syy
ls /Templates/
ls ./Templates/
ls -al ./Templates/
$env.TERMINFO
$env.TERM
$env.TERMINAL
THEMES
lg /usr/bin/env
lg
ls
alias lg = (ls | grid -c)
lg /usr/bin/env
ls /usr/bin/env
ls /usr/bin/env nu
alias mkdir = mkdir -s
mkdir ./themes/themes
ls ./themes/themes/
cd ./themes/themes/
ls
lvim onedark.nu
use onedark.nu
lg
ls
et-env config = ($env.config | merge {{color_config: (onedark)}})
et-env config = ($env.config | merge {{color_config: (onedark onedark)}})
et-env config = ($env.config | {{color_config: (onedark onedark)}})
ls
use onedark.nu 
et-env config = ($env.config | merge {{color_config: (onedark)}})
et-env config = ($env.config | merge {{color_config: ("onedar onedark"k)}})
let-env config = ($env.config | merge {{color_config: ("onedar onedark")}})
let-env config = ($env.config | merge {{color_config: (onedark)}})
let-env config = ($env.config | merge {{color_config: ("onedar onedark")}})
$env.config.color_config
let-env config = ($env.config | merge {{color_config: ("onedark onedark")}})
$env.config.color_config
zsh
$env.config.color_config
let-env config = ($env.config | merge {{color_config: ("onedark onedark")}})
$env.config.color_config
lvim $env.config.color_config
config nu
cd themes/themes/
ls
lvim tokyo_night.nu
chmod +x tokyo_night.nu
./tokyo_night.nu
let-env config = ($env.config | merge {{color_config: (tokyo_night)}})
ls
let-env config = ($env.config | merge {{color_config: (tokyo_night.nu)}})
./tokyo_night.nu
cd
cd .config/kitty/
ls
lvim .
$env.config.color_config
config nu
$env.config.color_config
config env
config nu
$env.config.color_config
config nu
$env.config.color_config
config nu
$env.config.color_config
config nu
$env.config.color_config
lvim /home/sshep/.config/nushell/config.nu
$env.config.color_config
lvim /home/sshep/.config/nushell/config.nu
cd .config/kitty/
lvim .
cd ..
cd zsh/
ls
lvim .
cd
cd themes/themes/
ls
lvim tokyo_night.nu
$env.config.color_config
cd ..
ls
rm path.txt
lvim update
cd Projects/rust/upddate/
ls
cd src
ls
lvim main.rs
cargo run
cd 
let $config = {<\n>table_mode: rounded<\n>}
ls
$env.config.color_config
cd themes/themes/
ls
lvim tokyo_night.nu
let $config = {<\n>show_banner: true<\n>}
config nu
ls
lg
ls | grid -c
$env.config.color_config
echo $LS_COLORS
echo LS_COLORS
alias | grep ls
unalias ls
hide ls
ls
unhide ls
alias ls = ls
ls
show ls
git clone git@github.com:sharkdp/vivid.git
cd vivid
ls
cd 
let-env LS_COLORS = (vivid generate onedark | str trim)
vivid
cd vivid
ls
lvim themes/
cd
let-env LS_COLORS = (vivid generate one-dark | str trim)
cd vivid
ls
cd vivid/
ls
cargo run
let-env LS_COLORS = (vivid generate one-dark | str trim)
cd
rm -rf vivid/
ls
cargo install vivid
vivid
let-env LS_COLORS = (vivid generate one-dark | str trim)
ls
let-env LS_COLORS = (vivid generate lava | str trim)
ls
let-env LS_COLORS = (vivid generate one-dark | str trim)
ls
let-env LS_COLORS = (vivid generate dracula | str trim)
ls
let-env LS_COLORS = (vivid generate jellybeans | str trim)
ls
let-env LS_COLORS = (vivid generate iceberg | str trim)
let-env LS_COLORS = (vivid generate iceberg-dark | str trim)
ls
let-env LS_COLORS = (vivid generate nord | str trim)
ls
let-env LS_COLORS = (vivid generate ayu | str trim)
ls
let-env LS_COLORS = (vivid generate alabaster_dark | str trim)
let-env LS_COLORS = (vivid generate gruvbox-dark | str trim)
ls
let-env LS_COLORS = (vivid generate snazzy | str trim)
ls
let-env LS_COLORS = (vivid generate molokai | str trim)
ls
let-env LS_COLORS = (vivid generate one-light | str trim)
ls
let-env LS_COLORS = (vivid generate one-dark | str trim)
ls
cd .config/
ls
ls | grid -c
cd 
cd Projects/rust/
ls | grid -c
cd rust-crash-course/
ls | grid -c
ls
cd
lsblk
cd .config/zsh/
ls
alias ll = ls -la
l = ls -d
ls -d
alias l = ls -d
ls
la
kk
ll
ls -a
ls -al
ls -alh
ls -dal
ls -d
ls a
ls -al
ll
lvim .
ll
$env.config.color_config
brew -- version
brew --version
which nu
chsh -l
cat /etc/shells
sudo su -
ls
$env.PROMPT_COMMAND_RIGHT
$env.PROMPT_INDICATOR
$env.PROMPT
$env.PROMPT_COMMAND_RIGHT
config nu
mkdir ~/.cache/starship
starship init nu | save ~/.cache/starship/init.nu
$nu.config-path
source ~/.cache/starship/init.nu
term size --help
lvim ~/.cache/starship/init.nu
source ~/.cache/starship/init.nu
lvim ~/.cache/starship/init.nu
source ~/.cache/starship/init.nu
lvim ~/.cache/starship/init.nu
source ~/.cache/starship/init.nu
lvim ~/.cache/starship/init.nu
rmdir ~/.cache/starship
rmd ~/.cache/starship
rm -rf ~/.cache/starship
rm ~/.cache/starship
zsh
mkdir ~/.cache/starship
cd .cache/starship/
ls
cd
$nu.env-path
config env
$nu.config-path
rm ~/.cache/starship/init.nu
rm .cache/starship/init.nu
config env
config nu
$nu.config-path
echo source ~/.cache/starship/init.nu >> /home/sshep/.config/nushell/config.nu
config nu
let $config = {<\n>show_banner: false<\n>}
config nu
nu
config nu
lvim .cache/starship/init.nu
nu
nu
lvim .cache/starship/init.nu
config env
config nu
ls
curl -sS https://starship.rs/install.sh | sh
config nu
ps
ps | sort-by mem
ls
cd Projects/rust/rust-handbook/
ls
open Cargo.toml
cd ..
ls
cd weather/
ls
open Cargo.toml | get dependencies
cd
term size
(term size).colums
term size.colums
term size colums
term size --help 
(term size).colums
(term size).columns
cd .cache/starship/
ls
open init.nu
lvim .
config env
config nu
source ~/.cache/starship/init.nu
lvim 
lvim .
source ~/.cache/starship/init.nu
lvim .
source ~/.cache/starship/init.nu
ls
config nu
cd .cache/starship/
cd
mkdir -s ~/.config && touch ~/.config/starship.toml
mkdir -s ~/.config; touch ~/.config/starship.toml
 touch ~/.config/starship.toml
cd .config/starship.toml/
ls
cd
ls
cd .config/
ls
rm -rf starship.toml/
touch starship.toml
ls
fzf
ls /run/media/sshep/545C906D5C904C1C/ | fzf
ls /run/media/sshep/545C906D5C904C1C/ | tree
tree --help
cd /run/media/sshep/545C906D5C904C1C
ls
tree -x
ls
ls Windows/
ls Users/sshep/
cd Users/sshep/
ls
open starship.toml
cat starship.toml
cp starship.toml ~/.config/starship.toml
cd ~/.config/
ls
open starship.toml
cd
sudo su -
lvim starship.toml
sudo su
sudo su -
ls
sudp pacman -S nano
sudo pacman -S nano
sudo su -
ls
config nu
which nu
chsh -l
chsh -s /home/sshep/.cargo/bin/nu
sudo su -
which nu
lls
ls
cd Projects/rust/rust-handbook/
cd 
cd .config/kitty/
ls
lvim .
ls
$env.PATH
env | each { |it| echo $"let-env ($it.name) = '($it.raw)'" } | str join (char nl)
lvim
echo path >> path.txt
zsh
ls
open path.txt
let-env PATH = ($env.PATH | append '/home/sshep/anaconda3/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.miniconda/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/share/neovim/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/share/go/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.cargo/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/bin')
let-env PATH = ($env.PATH | append '/home/linuxbrew/.linuxbrew/bin')
let-env PATH = ($env.PATH | append '/home/linuxbrew/.linuxbrew/sbin')
let-env PATH = ($env.PATH | append '/usr/local/sbin')
let-env PATH = ($env.PATH | append '/usr/local/bin')
let-env PATH = ($env.PATH | append '/usr/bin')
let-env PATH = ($env.PATH | append '/usr/lib/jvm/default/bin')
let-env PATH = ($env.PATH | append '/usr/bin/site_perl')
let-env PATH = ($env.PATH | append '/usr/bin/vendor_perl')
let-env PATH = ($env.PATH | append '/usr/bin/core_perl')
kate path.txt
ls
lvim
config nu
pacman -R nano
sudo pacman -R nano
config nu
cd
ls
cd .config/kitty/
lvim.
lvim .
ls
ls | grid -c
brew --version
$env.PATH
lvim
let-env PATH = ($env.PATH | append '/home/sshep/anaconda3/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.miniconda/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/share/neovim/bin')
! 31
let-env PATH = ($env.PATH | append '/home/sshep/.local/share/go/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.cargo/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/bin')
let-env PATH = ($env.PATH | append '/home/linuxbrew/.linuxbrew/bin')
let-env PATH = ($env.PATH | append '/home/linuxbrew/.linuxbrew/sbin')
let-env PATH = ($env.PATH | append '/usr/local/sbin')
let-env PATH = ($env.PATH | append '/usr/local/bin')
let-env PATH = ($env.PATH | append '/usr/bin')
let-env PATH = ($env.PATH | append '/usr/lib/jvm/default/bin')
let-env PATH = ($env.PATH | append '/usr/bin/site_perl')
let-env PATH = ($env.PATH | append '/usr/bin/vendor_perl')
let-env PATH = ($env.PATH | append '/usr/bin/core_perl')
ls
$env.PATH
lms
lvim
config nu
$env.config
lvim .config/nushell/
config nu
lvim .config/nushell/
lvim
$env.PATH
let-env PATH = ($env.PATH | append '/home/sshep/.local/share/neovim/bin')
lvim
$env.PATH
let-env PATH = ($env.PATH | append '/home/sshep/anaconda3/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.miniconda/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/share/neovim/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/share/go/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.cargo/bin')
let-env PATH = ($env.PATH | append '/home/sshep/.local/bin')
let-env PATH = ($env.PATH | append '/home/linuxbrew/.linuxbrew/bin')
let-env PATH = ($env.PATH | append '/home/linuxbrew/.linuxbrew/sbin')
let-env PATH = ($env.PATH | append '/usr/local/sbin')
let-env PATH = ($env.PATH | append '/usr/local/bin')
let-env PATH = ($env.PATH | append '/usr/bin')
let-env PATH = ($env.PATH | append '/usr/lib/jvm/default/bin')
let-env PATH = ($env.PATH | append '/usr/bin/site_perl')
let-env PATH = ($env.PATH | append '/usr/bin/vendor_perl')
let-env PATH = ($env.PATH | append '/usr/bin/core_perl')
lvim
lvim .config/nushell/
cd
$env.PATH
lvim
rm path.txt
ls
zsh
let-env PATH = ($env.PATH | append '/home/sshep/anaconda3/bin:/home/sshep/.miniconda/bin:/home/sshep/.local/share/neovim/bin:/home/sshep/.local/share/go/bin:/home/sshep/.cargo/bin:/home/sshep/.local/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl')
$env.PATH
lvim
lvim .config/nushell/
lvim
brew
cargo
pacman
sudo
lvim
nvim
ranger
sudo pacman -S netflix
sudo pacman -S chromium
cd .config/zsh/
cd ..
cd nvim/
cd ..
config nu\
config nu
lvim
cd
config nu | lvim
lvim .config/nushell/
brew
lvim
cd Projects/rust/rust-handbook/
ls
cd src
ls
cd ..
ls
cd 
cd .config/zsh/
cd ..
cd nvim/
ll
la
ls
cd
ls
nu
zsh
ajhksflskajhfd
cd .config/kitty
ls
lvim .
cd ..
cd nushell/
ls
lvim .
$env.EDITOR
$env.STARSHIP_SHELL
lvim .
env
let-env EDITOR = 'lvim'
config nu
ennv
env
$env.EDITOR
zoxide
zi
ranger
cd
ranger
$env.LANG
$env.DISPLAY
ls | tree
ls | grid -c
rm 7z2201-x64.msi
ls | grid -c
ps
ps | sort-by mem
ps | sort-by status
ps | sort-by status -r
cd Pictures/
ls
cd P
cd Pictures/
LS
ls
cd 4k/
ls
open clouds_sky_sunlight_373066_3840x2160.jpg
ls | grid -c
cd ..
ls
open `Regen build DOD.PNG`
ls
desktop.ini
open desktop.ini
cd
ls
open path.txt
$env.SOURCE
$env.STARSHIP_SESSION_KEY
$env.STARSHIP_SHELL
cd .cache/starship/
ls | grid -c
lvim init.nu
cd
ls
where starship.toml
where starship
where help
help where
ls | where starship
ls | where .toml
ls | where toml
fd
fd starship
fd toml
cd
cd .config
ls | grid -c
cd Projects/rust/rust-crash-course/
cd
cd Projects/rust/rust-crash-course/
cd
cd Projects/rust/rust-crash-course/
cd 
cd .config/i
cd .config
ls
lvim starship.toml
cd
cd .cache/starship/
ls
lvim init.nu
cd
cd Projects/rust/rust-crash-course/
cd
cd .cache/starship/
lvim init.nu
cd Projects/rust/rust-crash-course/
lvim starship.toml
cd Projects/rust/rust-crash-course/
sudo pacman -Syy
cd
sudo powerpill -Ss tutanota-bin
pacman -Ss tutanota
sudo powerpill -Ss tutanota-desktop-bin
sudo powerpill -S tutanota-desktop-bin
sudo powerpill -Ss wallet
sudo powerpill -Ss kwallet
sudo powerpill -S keypassxc
sudo powerpill -Ss keypass
sudo powerpill -Ss key-pass
sudo powerpill -Ss key
pikaur -S powertop
powertop
sudo powertop
udo envycontrol -q
zsh
nvidia-smi
nvidia-smi | complete
pikaur -Ss envycontrol
lspci -nn
lspci -nn | nvidia
lspci -nn | complete
lspci -nn | fzf
lspci -nn | rg nvidia
lspci -nn | egrep nvidia
lspci -nn | grep -E nvidia
lspci -nn | grep nvidia
lspci -nn | fzf
sudo pwerpill -S vfio
sudo pwerpill -S virt-manager qmeu qmeu-arch-extra ovmf vde ebtables dnsmasq bridge-urils openbsd-netcat
sudo powerpill -S virt-manager qmeu qmeu-arch-extra ovmf vde ebtables dnsmasq bridge-urils openbsd-netcat
sudo powerpill -S virt-manager qemu qemu-arch-extra ovmf vde2 ebtables dnsmasq bridge-utils openbsd-netcat
sudo lvim /etc/default/grub
grub-mkconfig -o /boot/grub//grub.cfg
sudo grub-mkconfig -o /boot/grub//grub.cfg
sudo reboot now
sudo powerpill -Ss looking-glass
sudo powerpill -Ss looking
pacman -Ss looking-glass-client
pacman -Ss looking
virsh
htop
sudo virsh net-list --all
 sudo ststemctl status libvirtd.service
 sudo systemctl status libvirtd.service
egrep -c '(vmx|svm)' /proc/cpuinfo
sudo virsh net-start default
sudo virsh net-autostart default
sudo virsh net-list --all
sudo adduser sshep libvirt
sudo useradd sshep libvirt
sudo useradd -g sshep libvirt
libvirt
sudo useradd -g sshep libvirt-qemu
ls user
virt-manager
sudo useradd sshep -g libvirt-qemu
usermod -aG libvirt sshep
sudo usermod -aG libvirt sshep
virt-manager
sudo usermod -aG libvirt-qemu sshep
ls
mkdir -s repos
cd repos
git clone https://aur.archlinux.org/looking-glass.git
cd looking-glass/
ls
makepgk -sic
makepkg -sic
cd
cd repos/
ls
cd
ls
cd gamemode/
ls
./bootstrap.sh
cd
sudo lvim /etc/default/grub
sudo powerpill -S swtpm
shutdown now
sudo pacman -Syy; sudo powerpill -Su; pikaur -Su
paru
pikaru
pikaur
pikaur -Su
ls
cd touch/
ls
cd
rmdir touch/
ls
lspci -nnk
sudo powerpill -S opemal-soft
sudo powerpill -S openal-soft
powerpill -Ss openal
lvim /etc/default/grub
sudo lvim /etc/default/grub
grub-mkconfig -o /boot/grub//grub.cfg
sudo grub-mkconfig -o /boot/grub//grub.cfg
dracut
sudp powerpill -Ss dracut
sudo powerpill -Ss dracut
sudo powerpill -S dracut
pikaur -S dracut
dracut
sudo lvim /etc/dracut.conf/local.conf
sudo lvim /etc/dracut.conf.d/local.conf
sudo rm -rf /etc/dracut.conf.d/local.conf
sudo rm -rf /etc/dracut.conf
sudo rm -rf /etc/dracut.conf.d
ls
cat /sys/devices/virtual/dmi/id/board_{vendor,name,version}
zsh
cat /sys/devices/virtual/dmi/id/board_{vendor;name;version}
pikaru edk2-ovmf virt-viewer swtpm
pikaur edk2-ovmf virt-viewer swtpm
pikaur -S edk2-ovmf virt-viewer swtpm
 pikaur -S libvirt
sudo systemctl enable --now libvirtd.service
sudo systemctl enable --now virtlogd.service
btop
pikaur -S btop
pikaur -Ss polkit
btop
groups
zsh
cd Arch-Install-sshep/
usermod -aG wheel sshep
sudo usermod -aG wheel sshep
groups
sudo usermod -aG wheel sshep
groups
lvim .
cd
zsh
lsblk
lsblk | complete
cd /run/media/sshep/WdBlack/
ls
cd Users/sshep/Downloads/
ls
cd ISO
ls
mkdir -s ~/iso
cp -r Windows.iso ~/iso/Windows.iso
cd 
ls
cd iso/
ls
cd
sudo lvim /etc/modprobe.d/vfio.conf
sudo lvim /etc/mkinitcpio.conf
sudo mkinitcpio -P linux-zen
grub-mkconfig -o /boot/grub//grub.cfg
sudo grub-mkconfig -o /boot/grub//grub.cfg
lspci -nnk | Nvidia Corp
lspci -nnk | Nvidia
lspci -nnk | grep Nvidia
lvim /etc/modprobe.d/vfio.conf
sudo lvim /etc/modprobe.d/vfio.conf
lvim /etc/modprobe.d/vfio.conf
lspci -nnk | grep Nvidia
lspci -nnk | fzf
lspci -nnk
lspci -nnk | grep VGA
lspci -nn | grep VGA
lspci -nnk | grep NVIDIA C
lspci -nnk | grep NVIDIA
lspci -nnk
sudo lvim /etc/modprobe.d/vfio.conf
sudo mkinitcpio -P linux-zen
lvim /etc/mkinitcpio.conf
sudo lvim /etc/mkinitcpio.conf
sudo mkinitcpio -P linux-zen
sudo lvim /etc/mkinitcpio.conf
sudo mkinitcpio -P linux-zen
reboot
sudo grub-mkconfig -o /boot/grub//grub.cfg
sudo mkinitcpio -P linux-zen
lspci -nnk
lsmod | grep kvm | complete
dmesg | grep -i IOMMU
sudo dmesg | grep -i IOMMU
cat /proc/cmdline | complete
lspci -nnk
cat /etc/libvirt/hooks/qemu
ls /etc/libvirt/hooks/qemu
sudo mkdir -s /etc/libvirt/hooks
sudo mkdir -S /etc/libvirt/hooks
sudo mkdir /etc/libvirt/hooks
udo wget 'https://raw.githubusercontent.com/PassthroughPOST/VFIO-Tools/master/libvirt_hooks/qemu' \
 zsh    -O /etc/libvirt/hooks/qemu
zsh
sudo wget 'https://raw.githubusercontent.com/PassthroughPOST/VFIO-Tools/master/libvirt_hooks/qemu' \
zsh
sudo chmod +x /etc/libvirt/hooks/qemu
sudo service libvirtd restart
sudo systemctl restart libvirtd
sudo systemctl restart libvirtd -v
zsh
sudo mkdir /etc/libvirt/hooks/qemu.d/win10/prepare/begin/script.sh
sudo mkdir /etc/libvirt/hooks/qemu.d/win10/prepare/begin/
 mkdir /etc/libvirt/hooks/qemu.d/win10/prepare/begin/
sudo mkdir -p /etc/libvirt/hooks/qemu.d/win10/prepare/begin/
sudo touch /etc/libvirt/hooks/qemu.d/win10/prepare/begin/script.sh
sudo chmod +x /etc/libvirt/hooks/qemu.d/win10/prepare/begin/script.sh
sudo mkdir -p /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin
sudo mkdir -p /etc/libvirt/hooks/qemu.d/{win10}/release/end
sudo lvim /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin
sudo chmod +x /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh
sudo chmod +x /etc/libvirt/hooks/qemu.d/{win10}/release/end/revert.sh
lspci -nnk
lspci -nnk | complete
ip a
ip a | grep inet
ls
lsmod | grep nvidia
lsmod | grep nv
lsmod | grep nv | complete
lsmod | grep nvidia | complete
lsmod | grep -i nvidia | complete
lsmod | grep nvidia
sudo /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh
lsmod | grep nvidia
systemctl --help
lspci -nn|grep -iP NVIDIA
lvim /etc/modprobe.d/vfio.conf
sudo lvim /etc/modprobe.d/vfio.conf
sudo lvim /etc/mkinitcpio.conf
mkinitcpio -P linux-zen
sudo mkinitcpio -P linux-zen
reboot
sudo reboot
lsmod | grep nvidia
modprobe -rnv nvidia_uvm
sudo lvim /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin
ip a
ip a | grep inet
sudo /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh
sudo /etc/libvirt/hooks/qemu.d/{win10}/release/end/revert.sh
btop
htop
btop
btop --utf-force
sudo /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh
btop --utf-force
sudo btop --utf-force
sudo /etc/libvirt/hooks/qemu.d/{win10}/release/end/revert.sh
sudo /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh
sudo /etc/libvirt/hooks/qemu.d/{win10}/release/end/revert.sh
reboot
sudo reboot
cd /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/
ls
cd /etc/libvirt/hooks/qemu.d/win10/
ls
cd prepare/
ls
cd begin/
ls
cd .. /..
cd .. / ..
cd ..
ls
rm -rf win10/
sudo rm -rf win10/
ls
cd
btop
btop --utf-force
ls /var/lib/libvirt/qemu/nvram/win10_VARS.fd
lvim /var/lib/libvirt/qemu/nvram/win10_VARS.fd
virt-manager --debug --no-fork
qemu --version
pacman -Ss vnc
pacman -Ss spicevmc
pacman -Ss spice-graphice
pacman -Ss spice-graphic
pacman -Ss spice
pacman -Ss spice-guest-tools
sudo powerpill -S spice-guest-tools
sudo powerpill -S spice-guest-tools-windows
sudo btop --utf-force
cd /etc/libvirt/hooks
ls
lvim qemu
ls
cd qemu.d/
ls
cd win
cd {win10}
cd ..
cd qemu.d/{win10}/
ls
sudo prepare/begin/start.sh
ls
sudo release/end/revert.sh
sudo reboot
rustup update
cargo update
sudo btop --utf-force
htop
sudo btop --utf-force
shutdown now
ip a
sudo /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh
sudo virsh start {win10}
sudo virsh start win10
sudo virsh list
sudo /etc/libvirt/hooks/qemu.d/{win10}/release/end/revert.sh
sudo /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh
sudo reboot
sudo  mv /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
sudo mkdir -p /etc/libvirt/hooks/qemu.d/win10/release/end
sudo  mv /etc/libvirt/hooks/qemu.d/win10/prepare/begin
sudo  mkdir -p /etc/libvirt/hooks/qemu.d/win10/prepare/begin
sudo  mv /etc/libvirt/hooks/qemu.d/{win10}/prepare/begin/start.sh /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
sudo mv /etc/libvirt/hooks/qemu.d/{win10}/release/end/revert.sh /etc/libvirt/hooks/qemu.d/win10/release/end/revert.sh
sudo /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
sudo /etc/libvirt/hooks/qemu.d/win10/release/end/revert.sh
lspci -nn|grep -iP NVIDIA
modprobe -rnv nvidia_uvm
lsmod | grep nvidia
sudo /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
sudo lvim /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
sudo /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
lsmod | grep nvidia
virsh start win10
virsh list
sudo virsh start win10
sudo virsh list
sudo /etc/libvirt/hooks/qemu.d/win10/release/end/revert.sh
sudo virsh list
sudo virsh start win10
sudo lvim /etc/default/grub
grub-mkconfig -o /boot/grub//grub.cfg
sudo grub-mkconfig -o /boot/grub//grub.cfg
dmesg | grep -i -e DMAR -e IOMMU
sudo dmesg | grep -i -e DMAR -e IOMMU
sudo reboot
sudo dmesg | grep -i -e DMAR -e IOMMU
#!/bin/bash
shopt -s nullglob
for g in $(find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V); do
    echo "IOMMU Group ${g##*/}:"
    for d in $g/devices/*; do
        echo -e "\t$(lspci -nns ${d##*/})"
    done;
done;
zsh
bash
cd /etc/dracut.conf.d
mddir /etc/dracut.conf.d
sudo lvim /etc/dracut.conf.d
dmesg | grep -i vfio
sudo dmesg | grep -i vfio
sudo dracut -f --kver `uname -r`
sudo uname -sr
dracut --help
sudo dracut -f --kver `uname -r`
uname -r
sudo dracut -f --kver `uname -r`
sudo lvim /etc/mkinitcpio.conf
lspci -nn|grep -iP NVIDIA
sudo lvim /etc/mkinitcpio.d/vfio.conf
lsmod | grep kvm
lsmod | grep nvidia
sudo lvim /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
sudo btop
lsmod | grep nvidia
sudo reboot
sudo lvim /etc/default/grub
grub-mkconfig -o /boot/grub//grub.cfg
sudo grub-mkconfig -o /boot/grub//grub.cfg
dmesg | grep -i vfio
sudo dmesg | grep -i vfio
sudo systemctl enable --now libvirtd.service
sudo virsh edit win10
virsh edit win10
virsh edit
sudo virsh edit win10
zsh
sudo /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh
sudo /etc/libvirt/hooks/qemu.d/win10/release/end/revert.sh
sudo reboot
sudo reboot now
cd .cache/
ls
cd starship/
ls
cd
ls
cd qemu
ls
lvim qemu
cd .config/lvim/
ls
la
ls -a
cd plugin/
ls
lvim packer_compiled.lua
cd ..
ls
ls config.lua
lvim config.lua
cd ..
cd
ls .config
ls .config/menus/
ls .config/menus/applications-merged/
open | .config/menus/applications-merged/
open .config/menus/applications-merged/
lvim .config/menus/applications-merged/
ls
cp checkout-bare.cfg.sh Arch-Install-sshep/checkout-bare.cfg.sh
cd Arch-Install-sshep/
ls
git add
git add .
git commit -m "added bash script for checkout prep"
git push
cd
ls
cd repos/
ls
cd
cd Projects/
ls
ls bash
cd bash
cd ..
ls rust
cd rust
cd rust-crash-course/cd
cd rust-crash-course
git add .
git push
cd ..
ls
cd upddate/
ls
git add .
git push
cd
cd .config.zsh
cd .config/zsh
ls
cd
zsh
cd Arch-Install-sshep/
ls
cargo install ranger
zsh
cargo install starship
sudo pacman -Syy gcclang
sudo pacman -Syy gcc
sudo pacman -Ss gcc
sudo pacman -S gcc gcc-libs
lvim Arch-Base-Install.sh
git add .
git commit -m "added bash script for checkout prep"
git push
ls
cd
cd Arch-Install-sshep/
sudo cp /etc/makepkg.conf .
sudo cp /etc/pacman.conf .
git add .
git commit -m "updated conf files"
git push
cd
ls
sudo reboot now
pacman -Qrd
cd Arch-Install-sshep/
lvim .
git add .
git commit -m "updated conf files"
git push
cd
sudo pacman -Syy; sudo powerpill -Su; pikaur -Su
sudo pacman -Syy
lvim /etc/modprobe.d/vfio.conf
lvim /etc/modprobe.d/
lvim /etc/mkinitcpio.conf
lvim /etc/default/grub
sudo lvim /etc/default/grub
sudo grub-mkconfig -o /boot/grub//grub.cfg
lsblk
pacman
pacman -Q
sudo pacman -Sy
zsh
lvim /etc/pacman.d/mirrorlist
pacman -Q | fzf
cd .config/zsh
ls
lvim .
zsh
cd
sudo pacman -Sy
ls -lah /var/lib/pacman/
ls -la /var/lib/pacman/
sudo rm -rf/var/lib/pacman/db.lck
sudo rm -rf /var/lib/pacman/db.lck
pacman -Syy
sudo pacman -Syy
sudo pacman -Syy; sudo powerpill -Su; pikaur -Su
paru -Syu
paru -R pikaur
sudo pacman -Syy; sudo powerpill -Su; paru -Su
ls
cd iso/
ls
cd
bash
zsh
bash
dmesg | grep -i -e DMAR -e IOMMU
sudo dmesg | grep -i -e DMAR -e IOMMU
sudo lvim /etc/default/grub
sudo grub-mkconfig -o /boot/grub//grub.cfg
#!/bin/bash
shopt -s nullglob
for g in $(find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V); do
    echo "IOMMU Group ${g##*/}:"
    for d in $g/devices/*; do
        echo -e "\t$(lspci -nns ${d##*/})"
    done;
zsh
lvim /etc/mkinitcpio.conf
ls /etc/dracut.conf.d
cd /etc/dracut.conf.d/
ls
lvim ostree.conf
cd..
ls
cd ..
ls
ls | fzf
rm -rm dracut.conf.d/
rm -rf dracut.conf.d/
sudo rm -rf dracut.conf.d/
sudo pacman -R dracut
paru -R dracut
paru -Ss dracut
cd
paru -S dracut
dracut
cd /etc/dracut.conf.d/
ls
lvim .
sudo lvim .
cd
sudo dracut -f --kver `uname -r`
cat /boot
ls /boot
dracut --hostonly --no-hostonly-cmdline /boot/initramfs-linux-zen.img
sudo dracut --hostonly --no-hostonly-cmdline /boot/initramfs-linux-zen.img
sudo dracut --hostonly --no-hostonly-cmdline /boot/initramfs-linux-zen.img --force
sudo dracut /boot/initramfs-linux-zen-fallback.img --force
sudo mkinitcpio -P linux-zen
sudo lvim /etc/mkinitcpio.conf
ls
ls /boot
sudo mkinitcpio -P linux-zen
sudo lvim /etc/default/grub
grub-mkconfig -o /boot/grub//grub.cfg
sudo grub-mkconfig -o /boot/grub//grub.cfg
cd
sudo reboot now
ls
sudo lvim /etc/default/grub
sudo lvim /etc/mkinitcpio.conf
sudo grub-mkconfig -o /boot/grub//grub.cfg
sudo mkinitcpio -P linux-zen
sudo reboot now
lspci -nnk -d
lspci -nnk
ranger
sudo lvim /etc/makepkg.conf
ls
cd repos/
ls
cd looking-glass/
ls
cd
ls
cd gamemode/
ls
cd
ls
cd themes/
ls
cd themes/
ls
cd
ls
cd repos
git clone https://aur.archlinux.org/pikaur
cd pikaur/
makepkg -sic
cd
cd repos/
ls
cd
pikaur -Syy
pikaur -Syu
cd
ls
cd Arch-Install-sshep/
ls
rm makepkg.conf
rm pacman.conf
ls
cp /etc/makepkg.conf
cp /etc/makepkg.conf .
ls
cp /etc/pacman.conf .
ls
git add .
ls
git commit -m "updated conf files"
git push
cd
ls
cd .config/lvim/
lvim .config/starship.toml
ls
cd
zsh
ls
zsh
sudo grub-mkconfig -o /boot/grub//grub.cfg
neofetch
lspci -nnk
sudo virsh list
sudo virsh edit win10
virsh --help
virsh connect
virsh vol-info
virsh --help
sudo virsh vol-list
sudo virsh sysinfo
lsmod | grep nvidia
modprobe -rnv nvidia_uvm
ls
konsole
ls
cd gamemode/
ls
sudo powerpill -S meson dbus libinih
ls
cd repos
git clone https://github.com/FeralInteractive/gamemode.git
cd gamemode
git checkout 1.7 # omit to build the master branch
./bootstrap.sh
cd
gamemode -t
systemctl --user stop gamemoded.service
ninja uninstall -C builddir
bash
systemctl --user stop gamemoded.service
gamemoded -t
^gamemoded -t
zsh
cd repos
dc gamemode/
cd gamemode/
ls
git checkout 1.7
./bootstrap.sh --verbose
./bootstrap.sh
pikaur -Syy ninja
bash
fdopen
pfid
ls
cd builddir/
ls
pacman -Q | grep ninja
lvim build.ninja
ls
cd ..
ls
cd scripts/\
cd scripts
ls
./format-check.sh
./static-analyser-check.sh
./mkrelease.sh
cd ..
ls
lvim bootstrap.sh
cd ..
rm -rf gamemode/
cd
rm -rf gamemode/
lvim README.md
ls
cd
ls
cd repos/
ls
rm -rf looking-glass/
ls
cd
sudo pacman -S gamemode lib32-gamemode
sudo pacman -R gamemode lib32-gamemode
cd /usr/lib/pkgconfig/
ls
ls | fzf
sudo rm -rm gamemode.pc libgamemodeauto.pc
sudo rm -rf gamemode.pc libgamemodeauto.pc
cd
sudo pacman -R gamemode lib32-gamemode
sudo pacman -S gamemode lib32-gamemode
sudo rm /usr/share/metainfo/io.github.feralinteractive.gamemode.metainfo.xml
sudo rm /usr/share/polkit-1/actions/com.feralinteractive.GameMode.policy
sudo rm /usr/share/dbus-1/services/com.feralinteractive.GameMode.service
sudo rm /usr/lib/sysusers.d/gamemode.conf
sudo powerpill -S gamemode lib32-gamemode
sudo rm /usr/bin/gamemoded
sudo rm /usr/bin/gamemoderun
sudo rm /usr/bin/gamemodelist
sudo rm /usr/bin/gamemode-simulate-game
sudo powerpill -S gamemode lib32-gamemode
sudo rm /usr/include/gamemode_client.h
sudo rm /usr/lib/libgamemode.so
sudo rm /usr/lib/libgamemode.so.0
sudo rm /usr/lib/libgamemodeauto.a
sudo rm /usr/lib/libgamemodeauto.so
sudo rm /usr/lib/libgamemode.so.0.0.0
sudo rm /usr/lib/libgamemodeauto.so.0
sudo rm /usr/lib/libgamemodeauto.so.0.0.0
sudo powerpill -S gamemode lib32-gamemode
gamemoded -t
btop
sudo powerpill -S btop
btop
ping --help
ping(8)
ping 192.168.0.0 192.126.255.255
ping -n 192.168.0.0 192.126.255.255
ping --help
ping -nc 3 196.168.0.0-196.168.255.255
ping -nc 3 192.168.0.0-192.168.255.255
ping -nc 3 192.168.0.0 192.168.255.255
pacman -Ss metasploit
sudo btop
lazygit --help
zsh
sudo powerpill -Ss kvantum
sudo powerpill -Syy kvantum
LXQt
lqxt
kde
KDE
htop
